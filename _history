{"entries":[{"timestamp":1751027114797,"editorVersion":"7.0.61","changes":[{"type":"edited","filename":"main.ts","patch":[{"diffs":[[-1,"/**\n* Use this file to define custom functions and blocks.\n* Read more at https://makecode.microbit.org/blocks/custom\n*/\n/**\n * Custom blocks\n */\n//% weight=100 color=#5EA9DD icon=\"\\uf201\"\nnamespace BitChart {\n    // 全局变量\n    let dataHistory: number[] = []\n    let minValue = Infinity\n    let maxValue = -Infinity\n    let lastX = 0\n    let needsFullRedraw = true\n\n    /**\n     * draw a line graph on your OLED\n     */\n    //% block=\"draw line graph: data %data sample-rate %sampleRate jitter %jitter\"\n    export function drawCurve(data: number, sampleRate: number, jitter: number): void {\n        // 1. 检查是否需要更新极值\n        let rangeChanged = false\n        if (data < minValue) {\n            minValue = data - jitter\n            rangeChanged = true\n        }\n        if (data > maxValue) {\n            maxValue = data + jitter\n            rangeChanged = true\n        }\n\n        // 2. 添加新数据点\n        dataHistory.push(data)\n        if (dataHistory.length > 128) {\n            dataHistory.shift()\n        }\n\n        // 3. 决定刷新方式\n        if (rangeChanged || needsFullRedraw || dataHistory.length === 1) {\n            // 需要全屏刷新\n            fullRedraw()\n            needsFullRedraw = false\n        } else {\n            // 仅更新最新线段\n            partialRedraw()\n        }\n\n        // 4. 延迟控制采样率\n        basic.pause(1000 / sampleRate)\n    }\n\n    /**\n     * clear and reset the graph\n     */\n    //% block=\"reset graph\"\n    export function resetGraph(): void {\n        dataHistory = []\n        minValue = Infinity\n        maxValue = -Infinity\n        needsFullRedraw = true\n        YFOLED.clear()\n    }\n\n    function fullRedraw() {\n        // 1. 清除屏幕\n        YFOLED.clear()\n\n        // 2. 显示极值\n        // 最大值显示在顶部(第0行)\n        YFOLED.writeNumNewLine(maxValue)\n        // 最小值显示在底部(第7行)\n        for (let i = 0; i < 6; i++) {\n            YFOLED.newLine()\n        }\n        YFOLED.writeNumNewLine(minValue)\n\n        // 3. 绘制所有线段\n        // 计算绘图区域(避开文字显示区域)\n        const topMargin = 10    // 最大值下方留出空间\n        const bottomMargin = 10 // 最小值上方留出空间\n        const graphY = topMargin\n        const graphHeight = 64 - topMargin - bottomMargin\n\n        for (let i = 1; i < dataHistory.length; i++) {\n            const y1 = calculateY(dataHistory[i - 1], graphY, graphHeight)\n            const y2 = calculateY(dataHistory[i], graphY, graphHeight)\n            YFOLED.drawLine(i - 1, y1, i, y2)\n        }\n    }\n\n    function partialRedraw() {\n        // 计算绘图区域(与fullRedraw一致)\n        const topMargin = 10\n        const bottomMargin = 10\n        const graphY = topMargin\n        const graphHeight = 64 - topMargin - bottomMargin\n\n        const len = dataHistory.length\n\n        // 1. 清除上一条线段的末端\n        if (len > 2) {\n            const yPrev = calculateY(dataHistory[len - 3], graphY, graphHeight)\n            const yLast = calculateY(dataHistory[len - 2], graphY, graphHeight)\n            YFOLED.drawLine(len - 3, yPrev, len - 2, yLast)\n        }\n\n        // 2. 绘制新线段\n        const y1 = calculateY(dataHistory[len - 2], graphY, graphHeight)\n        const y2 = calculateY(dataHistory[len - 1], graphY, graphHeight)\n        YFOLED.drawLine(len - 2, y1, len - 1, y2)\n\n        // 3. 检查是否需要循环\n        if (len === 128) {\n            dataHistory = []\n            needsFullRedraw = true\n        }\n    }\n\n    function calculateY(value: number, graphY: number, graphHeight: number): number {\n        // 计算归一化Y坐标并确保在绘图区域内\n        if (maxValue === minValue) {\n            return graphY + graphHeight / 2  // 所有值相同时显示在中间\n        }\n        let y = graphY + graphHeight - Math.round(\n            (value - minValue) / (maxValue - minValue) * graphHeight\n        )\n        return Math.max(graphY, Math.min(graphY + graphHeight, y))\n    }\n}"],[1,"\n"]],"start1":0,"start2":0,"length1":3695,"length2":1}]},{"type":"edited","filename":"pxt.json","patch":[{"diffs":[[0,"\": \""],[-1,"A pratical extension for data analysis"],[0,"\",\n"],[1,""],[0,"    "]],"start1":47,"start2":47,"length1":49,"length2":11},{"diffs":[[0,"   \""],[-1,"YFOLED\": \"github:YFROBOT-TM/pxt-yfrobot-oled#a38544532c0aa769976ffcf005ff06f115dab158"],[1,"radio\": \"*"],[0,"\",\n "]],"start1":102,"start2":102,"length1":93,"length2":18},{"diffs":[[0,"\n    \"files\": [\n"],[1,"        \"main.blocks\",\n"],[0,"        \"main.ts"]],"start1":151,"start2":151,"length1":32,"length2":55},{"diffs":[[0,"   \""],[-1,"testFiles\": [\n        \"test.ts\"\n    ],\n    \"preferredEditor\": \"tsprj\""],[1,"additionalFilePaths\": []"],[0,"\n}\n"]],"start1":237,"start2":237,"length1":76,"length2":31}]},{"type":"added","filename":"test.ts","value":"// tests go here; this will not be compiled when this package is used as an extension.\n"}]}],"snapshots":[{"timestamp":1751027114796,"editorVersion":"7.0.61","text":{"main.blocks":"<xml xmlns=\"http://www.w3.org/1999/xhtml\">\n  <block type=\"pxt-on-start\"></block>\n  <block type=\"device_forever\"></block>\n</xml>","main.ts":"\n","README.md":"","pxt.json":"{\n    \"name\": \"oled-bitchart\",\n    \"description\": \"\",\n    \"dependencies\": {\n        \"core\": \"*\",\n        \"radio\": \"*\",\n        \"microphone\": \"*\"\n    },\n    \"files\": [\n        \"main.blocks\",\n        \"main.ts\",\n        \"README.md\"\n    ],\n    \"additionalFilePaths\": []\n}\n"}}],"shares":[],"lastSaveTime":1751027344583}